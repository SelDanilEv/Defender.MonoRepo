networks:
  external-network:
    external: true

services:
  local-identity-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.IdentityService
    image: local-identity-service
    container_name: LocalIdentityService
    ports:
      - "47050:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  local-user-management-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.UserManagementService
    image: local-user-management-service
    container_name: LocalUserManagementService
    ports:
      - "47051:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  local-notification-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.NotificationService
    image: local-notification-service
    container_name: LocalNotificationService
    ports:
      - "47052:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  local-portal:
    build:
      context: .
      dockerfile: Dockerfile.Portal
      args:
        SERVICE_DIR: Defender.Portal
    image: local-portal
    container_name: LocalPortal
    ports:
      - "47053:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  # local-secret-management-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.Service
  #     args:
  #       SERVICE_DIR: Defender.SecretManagementService
  #   image: local-secret-management-service
  #   container_name: LocalSecretManagementService
  #   ports:
  #     - "47056:80"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=DockerLocal
  #   env_file:
  #     - ../secrets/secrets.local.list
  #   networks:
  #     - external-network

  local-job-scheduler-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.JobSchedulerService
    image: local-job-scheduler-service
    container_name: LocalJobSchedulerService
    ports:
      - "47057:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  local-wallet-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.WalletService
    image: local-wallet-service
    container_name: LocalWalletService
    ports:
      - "47058:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  local-general-testing-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.GeneralTestingService
    image: local-general-testing-service
    container_name: LocalGeneralTestingService
    ports:
      - "47059:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  local-risk-games-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.RiskGamesService
    image: local-risk-games-service
    container_name: LocalRiskGamesService
    ports:
      - "47060:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  local-budget-tracker-service:
    build:
      context: .
      dockerfile: Dockerfile.Service
      args:
        SERVICE_DIR: Defender.BudgetTracker
    image: local-budget-tracker-service
    container_name: LocalBudgetTrackerService
    ports:
      - "47061:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerLocal
    env_file:
      - ../secrets/secrets.local.list
    networks:
      - external-network

  mongo_local:
    container_name: "mongo_local"
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "mongo_local_data:/data/db"
      - "mongo_local_config:/data/configdb"

  local-postgres-service:
    image: postgres:latest
    container_name: local-postgres-service
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cache_database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - external-network

  local-zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: local-zookeeper
    ports:
      - "2181:2181"
    networks:
      - external-network

  local-kafka-service:
    image: wurstmeister/kafka:latest
    container_name: local-kafka-service
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=local-zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://local-kafka-service:9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
    ports:
      - "9092:9092"
    networks:
      - external-network

  local-kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: local-kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=local-kafka-service:9092
    networks:
      - external-network

  local-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: local-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    networks:
      - external-network

volumes:
  mongo_local_data:
  mongo_local_config:
  postgres_data:
