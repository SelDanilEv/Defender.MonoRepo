name: ArgoCD Tagged Deployment

on:
  workflow_run:
    workflows: ["Build and Publish Docker Images"]
    types: [completed]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      service:
        description: 'Specific service to deploy (leave empty for all)'
        required: false
        default: ''
      image_tag:
        description: 'Specific image tag to deploy (leave empty for latest)'
        required: false
        default: ''
      deployment_strategy:
        description: 'Deployment strategy'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - tagged
          - all

env:
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}

jobs:
  deploy-to-argocd:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd-linux-amd64
        sudo mv argocd-linux-amd64 /usr/local/bin/argocd

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup kubectl config
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Login to ArgoCD
      run: |
        export KUBECONFIG=kubeconfig.yaml
        argocd login ${{ secrets.ARGOCD_SERVER }} --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }} --insecure

    - name: Determine deployment parameters
      id: deployment-params
      run: |
        # Set default values
        IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        DEPLOYMENT_STRATEGY="${{ github.event.inputs.deployment_strategy }}"
        
        # If no tag specified, try to get from previous workflow
        if [[ -z "$IMAGE_TAG" ]]; then
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # For now, use latest. In a more advanced setup, you could parse the actual tags
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="latest"
          fi
        fi
        
        # Set default deployment strategy
        if [[ -z "$DEPLOYMENT_STRATEGY" ]]; then
          DEPLOYMENT_STRATEGY="staging"
        fi
        
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "deployment_strategy=$DEPLOYMENT_STRATEGY" >> $GITHUB_OUTPUT
        
        echo "Deployment Parameters:"
        echo "  Image Tag: $IMAGE_TAG"
        echo "  Strategy: $DEPLOYMENT_STRATEGY"

    - name: Generate ArgoCD Applications
      run: |
        chmod +x scripts/create-tagged-deployment.sh
        ./scripts/create-tagged-deployment.sh "${{ steps.deployment-params.outputs.image_tag }}" "${{ steps.deployment-params.outputs.deployment_strategy }}"

    - name: Update GitHub repository URL
      run: |
        # Replace placeholder with actual repository URL
        REPO_URL="https://github.com/${{ github.repository }}.git"
        find helm/argocd-applications -name "*-app.yaml" -exec sed -i "s|your-username/Defender.MonoRepo|${{ github.repository }}|g" {} \;
        echo "Updated repository URL to: $REPO_URL"

    - name: Deploy to ArgoCD
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        if [[ "${{ github.event.inputs.service }}" != "" ]]; then
          # Deploy specific service
          SERVICE_NAME="${{ github.event.inputs.service }}"
          case "$SERVICE_NAME" in
            "Defender.Portal")
              APP_PREFIX="defender-portal"
              ;;
            "Defender.UserManagementService")
              APP_PREFIX="defender-user-management"
              ;;
            "Defender.WalletService")
              APP_PREFIX="defender-wallet"
              ;;
            "Defender.RiskGamesService")
              APP_PREFIX="defender-risk-games"
              ;;
            "Defender.NotificationService")
              APP_PREFIX="defender-notification"
              ;;
            "Defender.JobSchedulerService")
              APP_PREFIX="defender-job-scheduler"
              ;;
            "Defender.IdentityService")
              APP_PREFIX="defender-identity"
              ;;
            *)
              echo "Unknown service: $SERVICE_NAME"
              exit 1
              ;;
          esac
          
          # Deploy based on strategy
          case "${{ steps.deployment-params.outputs.deployment_strategy }}" in
            "production")
              APP_NAME="${APP_PREFIX}-prod"
              ;;
            "staging")
              APP_NAME="${APP_PREFIX}-staging"
              ;;
            "tagged")
              APP_NAME="${APP_PREFIX}-tagged"
              ;;
            *)
              echo "Unknown deployment strategy"
              exit 1
              ;;
          esac
          
          echo "Deploying $APP_NAME to ArgoCD..."
          argocd app create -f "helm/argocd-applications/${APP_NAME}-app.yaml" --upsert
          argocd app sync "$APP_NAME" --prune
        else
          # Deploy all services based on strategy
          echo "Deploying all services with strategy: ${{ steps.deployment-params.outputs.deployment_strategy }}"
          
          case "${{ steps.deployment-params.outputs.deployment_strategy }}" in
            "production")
              PATTERN="*-prod-app.yaml"
              ;;
            "staging")
              PATTERN="*-staging-app.yaml"
              ;;
            "tagged")
              PATTERN="*-tagged-app.yaml"
              ;;
            "all")
              PATTERN="*-app.yaml"
              ;;
            *)
              echo "Unknown deployment strategy"
              exit 1
              ;;
          esac
          
          for app in helm/argocd-applications/$PATTERN; do
            if [ -f "$app" ]; then
              echo "Deploying $app"
              argocd app create -f "$app" --upsert
            fi
          done
          
          # Sync all applications
          argocd app list --output name | xargs -I {} argocd app sync {} --prune
        fi

    - name: Wait for ArgoCD sync
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        if [[ "${{ github.event.inputs.service }}" != "" ]]; then
          SERVICE_NAME="${{ github.event.inputs.service }}"
          case "$SERVICE_NAME" in
            "Defender.Portal") APP_PREFIX="defender-portal" ;;
            "Defender.UserManagementService") APP_PREFIX="defender-user-management" ;;
            "Defender.WalletService") APP_PREFIX="defender-wallet" ;;
            "Defender.RiskGamesService") APP_PREFIX="defender-risk-games" ;;
            "Defender.NotificationService") APP_PREFIX="defender-notification" ;;
            "Defender.JobSchedulerService") APP_PREFIX="defender-job-scheduler" ;;
            "Defender.IdentityService") APP_PREFIX="defender-identity" ;;
          esac
          
          case "${{ steps.deployment-params.outputs.deployment_strategy }}" in
            "production") APP_NAME="${APP_PREFIX}-prod" ;;
            "staging") APP_NAME="${APP_PREFIX}-staging" ;;
            "tagged") APP_NAME="${APP_PREFIX}-tagged" ;;
          esac
          
          echo "Waiting for $APP_NAME to sync..."
          argocd app wait "$APP_NAME" --sync --timeout 300
        else
          echo "Waiting for all applications to sync..."
          case "${{ steps.deployment-params.outputs.deployment_strategy }}" in
            "production") PATTERN="*-prod" ;;
            "staging") PATTERN="*-staging" ;;
            "tagged") PATTERN="*-tagged" ;;
            "all") PATTERN="*" ;;
          esac
          
          argocd app list --output name | grep "$PATTERN" | xargs -I {} argocd app wait {} --sync --timeout 300
        fi

    - name: Get deployment status
      run: |
        export KUBECONFIG=kubeconfig.yaml
        echo "=== ArgoCD Application Status ==="
        argocd app list
        echo ""
        echo "=== Deployment Summary ==="
        echo "Image Tag: ${{ steps.deployment-params.outputs.image_tag }}"
        echo "Strategy: ${{ steps.deployment-params.outputs.deployment_strategy }}"
        echo "Service: ${{ github.event.inputs.service || 'All Services' }}"
        echo ""
        echo "=== Recent Sync History ==="
        
        if [[ "${{ github.event.inputs.service }}" != "" ]]; then
          SERVICE_NAME="${{ github.event.inputs.service }}"
          case "$SERVICE_NAME" in
            "Defender.Portal") APP_PREFIX="defender-portal" ;;
            "Defender.UserManagementService") APP_PREFIX="defender-user-management" ;;
            "Defender.WalletService") APP_PREFIX="defender-wallet" ;;
            "Defender.RiskGamesService") APP_PREFIX="defender-risk-games" ;;
            "Defender.NotificationService") APP_PREFIX="defender-notification" ;;
            "Defender.JobSchedulerService") APP_PREFIX="defender-job-scheduler" ;;
            "Defender.IdentityService") APP_PREFIX="defender-identity" ;;
          esac
          
          case "${{ steps.deployment-params.outputs.deployment_strategy }}" in
            "production") APP_NAME="${APP_PREFIX}-prod" ;;
            "staging") APP_NAME="${APP_PREFIX}-staging" ;;
            "tagged") APP_NAME="${APP_PREFIX}-tagged" ;;
          esac
          
          argocd app history "$APP_NAME" --output table | head -10
        else
          case "${{ steps.deployment-params.outputs.deployment_strategy }}" in
            "production") PATTERN="*-prod" ;;
            "staging") PATTERN="*-staging" ;;
            "tagged") PATTERN="*-tagged" ;;
            "all") PATTERN="*" ;;
          esac
          
          for app in $(argocd app list --output name | grep "$PATTERN"); do
            echo "=== $app ==="
            argocd app history "$app" --output table | head -5
            echo ""
          done
        fi

    - name: Create deployment summary
      if: always()
      run: |
        echo "## 🚀 ArgoCD Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Parameters:**" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag:** ${{ steps.deployment-params.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Strategy:** ${{ steps.deployment-params.outputs.deployment_strategy }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Service:** ${{ github.event.inputs.service || 'All Services' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Monitor deployment in ArgoCD UI" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify application health" >> $GITHUB_STEP_SUMMARY
        echo "3. Run smoke tests if applicable" >> $GITHUB_STEP_SUMMARY
